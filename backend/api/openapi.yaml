#
# CSE183 Assignment 9 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 9 Backend
  version: 0.1.0
  title: CSE183 Assignment 9 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  # /dummy:
  #   get:
  #     description: Dummy Endpoint
  #     responses:
  #       200:
  #         description: Succesful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/DummyResponse'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  /:
    get:
      description: "testsing"
      responses:
        200:
          description: "good"
  /mailbox/summary:
    get:
      description: "Get list of all mailboxes and the number of emails in them. Includes 'starred' pseudobox."
      responses:
        200:
          description: "All good"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MailboxSummary"
  /mailbox/by/{id}:
    get:
      description: "Get list of all emails in mailbox."
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: "ID of mailbox to get"
      responses:
        200:
          description: "All good"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmailFull"
        404:
          description: "Mailbox does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /mailbox:
    post:
      description: "Create new mailbox."
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: "Name of mailbox to create"
      responses:
        201:
          description: "Created"
        409:
          description: "Mailbox already exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/contacts:
    get:
      description: "Get known contacts"
      responses:
        200:
          description: "Contacts got"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /user/update:
    post:
      description: "Update user info"
      responses:
        201:
          description: "Update Successful"
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - "accessToken"
                properties:
                  accessToken:
                    type: string
          
  /mail/:
    post:
      description: "Send email"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailNew"
      responses:
        201:
          description: "Email posted sucesfully"
  /mail/move:
    post:
      description: "Move email by id to mailbox by id"
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: uuid
          required: true
          description: "ID of email to move"
        - in: query
          name: mailbox
          schema:
            type: string
            format: uuid
          required: true
          description: "ID of mailbox to move to"
      responses:
        201:
          description: "Email moved sucesfully"
  
  /mail/{id}:
    get:
      description: "Get full email by id."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "ID of email to get"
      responses:
        200:
          description: "All good"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailFull"
        404:
          description: "Email does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /mail/star/{id}:
    get:
      description: "Set star status of email by ID."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "ID of email to star"
        - in: query
          name: starred
          schema:
            type: string
          required: true
          description: "Starred state to set to"
      responses:
        204:
          description: "All good"
        404:
          description: "Email does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /mail/unread/{id}:
    put:
      description: "Set unread status of email by ID."
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "ID of email to mark read/unread"
        - in: query
          name: unread
          schema:
            type: string
          required: true
          description: "Unread state to set to"
      responses:
        204:
          description: "All good"
        404:
          description: "Email does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      description: "Login with supplied creds"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - "email"  
                - "password"  
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "Successful login"
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - "accessToken"
                properties:
                  accessToken:
                    type: string
        401: 
          description: "No authorization header provided"
        403:
          description: "Login unsucessful"

components:
  schemas:
    MailboxSummary:
      additionalProperties: false
      required:
        - "name"
        - "size"
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        size:
          type: number
          format: int32
    Mailbox:
      additionalProperties: false
      required:
        - "name"
        - "size"
        - "mail"
      properties:
        name:
          type: string
        size:
          type: number
          format: int32
        mail:
          type: array
          items:
            $ref: "#/components/schemas/EmailFull"
    User:
      additionalProperties: false
      required:
        - "id"
        - "name"
        - "email"
        - "showAvatar"
      properties:
        id:
          type: string
          format: uuid
        avatar:
          type: string
          format: uri
        name:
          type: string
        email:
          type: string
          format: email
        showAvatar:
          type: boolean
          
    EmailFull:
      additionalProperties: false
      required:
        - "id"
        - "to"
        - "from"
        - "subject"
        - "content"
        - "sent"
        - "starred"
        - "unread"
        - "received"
      properties:
        id:
          type: string
          format: uuid
        to:
          $ref: '#/components/schemas/User'
        from:
          $ref: '#/components/schemas/User'
        subject:
          type: string
        content: 
          type: string
        mailbox: 
          type: string
        sent:
          type: string
          format: date-time
        received:
          type: string
          format: date-time
        starred:
          type: boolean
        unread:
          type: boolean
    EmailNew:
      additionalProperties: false
      required:
        - "to"
        - "subject"
        - "content"
      properties:
        to:
          type: object
          properties:
            email:
              type: string
              format: email
            name:
              type: string
        subject:
          type: string
        content: 
          type: string


    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    DummyResponse:
      required:
        - message
      properties:
        message:
          type: string